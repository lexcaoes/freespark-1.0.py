#!/usr/bin/python3
# -*- coding: utf-8 -*-
import sys
import time
import os
import PySide2
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
list=('1','2','3','4','5','6')
from PyQt5 import QtWidgets, QtGui
action=1
dirname = os.path.dirname(PySide2.__file__)
plugin_path = os.path.join(dirname, 'plugins', 'platforms')
os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = plugin_path
class fs(QWidget):
    def __init__(self, parent=None, **kwargs):
        super().__init__()
        super(fs, self).__init__(parent)
        self.setWindowFlags(Qt.FramelessWindowHint| Qt.WindowStaysOnTopHint )
        self.setAutoFillBackground(False)
        self.setAttribute(Qt.WA_TranslucentBackground, True)
        self.repaint()
        #设置图片
        self.image = QLabel(self)
        self.image.setPixmap(QPixmap.fromImage(self.loadImage('D:\python\pythonProject\p1.png')))
        self.image.setScaledContents (False)
        #窗口设置
        self.move(800, 800)
        self.resize(500,500)
        self.setWindowTitle('None')
        self.show()
        self.timer = QTimer()
        self.timer.timeout.connect(self.change)
        self.timer.start(150)
    def change(self):
        global action
        if action<5:
            action+=1
        elif action==5:
            action=0
        a=os.path.join('D:\\','python','pythonProject','p'+list[action]+'.png')
        '''桌面动画一帧图片'''
        self.image.setPixmap(QPixmap.fromImage(self.loadImage(a)))

    def loadImage(self, ip):
        image = QImage()
        image.load(ip)
        return image
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.moved = True
            self.yidong = event.globalPos()-self.pos()
            event.accept()
            self.setCursor(QCursor(Qt.OpenHandCursor))
        '''鼠标移动, 则宠物也移动'''
    def mouseMoveEvent(self, event):
        if Qt.LeftButton and self.moved:
             self.move(event.globalPos() - self.yidong)
             event.accept()
        '''鼠标释放时, 取消绑定'''
    def mouseReleaseEvent(self, event):
        self.moved = False
        self.setCursor(QCursor(Qt.ArrowCursor))
        # 不调用show不会显示系统托盘
    def quit(self):
            self.close()
            sys.exit()
if __name__ == '__main__':
 app = QApplication(sys.argv)
 pet = fs()
 pet.show()
 # 托盘设置
 plate = QSystemTrayIcon(pet)
 plate.setIcon(QIcon('D:\python\pythonProject\\2.png'))
 a1 = QAction('&显示(Show)', triggered=pet.show)
 def quitApp():
   QCoreApplication.instance().quit()
 a2 = QAction('&退出', triggered=quitApp)
 tpMenu = QMenu()
 tpMenu.addAction(a1)
 tpMenu.addAction(a2)
 plate.setContextMenu(tpMenu)
 plate.show()
sys.exit(app.exec_())
